//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputAction/BackButton.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BackButton: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BackButton()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BackButton"",
    ""maps"": [
        {
            ""name"": ""Back"",
            ""id"": ""ba2e34fa-5d0a-4920-9684-126e8926df4e"",
            ""actions"": [
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""5cfc1ea9-cb4a-4ef7-810c-b4c54815ed28"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6fc61b14-23b4-413a-958d-6c5d9e81f3af"",
                    ""path"": ""*/<Android>/back"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": []
        }
    ]
}");
        // Back
        m_Back = asset.FindActionMap("Back", throwIfNotFound: true);
        m_Back_Back = m_Back.FindAction("Back", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Back
    private readonly InputActionMap m_Back;
    private List<IBackActions> m_BackActionsCallbackInterfaces = new List<IBackActions>();
    private readonly InputAction m_Back_Back;
    public struct BackActions
    {
        private @BackButton m_Wrapper;
        public BackActions(@BackButton wrapper) { m_Wrapper = wrapper; }
        public InputAction @Back => m_Wrapper.m_Back_Back;
        public InputActionMap Get() { return m_Wrapper.m_Back; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BackActions set) { return set.Get(); }
        public void AddCallbacks(IBackActions instance)
        {
            if (instance == null || m_Wrapper.m_BackActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BackActionsCallbackInterfaces.Add(instance);
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
        }

        private void UnregisterCallbacks(IBackActions instance)
        {
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
        }

        public void RemoveCallbacks(IBackActions instance)
        {
            if (m_Wrapper.m_BackActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBackActions instance)
        {
            foreach (var item in m_Wrapper.m_BackActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BackActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BackActions @Back => new BackActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IBackActions
    {
        void OnBack(InputAction.CallbackContext context);
    }
}
